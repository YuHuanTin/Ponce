name: Build for OSX
on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason'
        required: false
  release:
    types: # This configuration does not affect the page_build event above
      - created

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Download IDA_SDK
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.SDK_REPO }}
          token: ${{ secrets.SDK_REPO_ACCESS_TOKEN }}
          path: private-sdk-repo

      - name: Unzip IDA_SDKs.zip
        run: |
          unzip ./private-sdk-repo/idasdk90.zip -d IDA_SDKs

      - name: Download vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          cd ..

      - name: Resume vcpkg
        id: cache-vcpkg-id
        uses: actions/cache@v4.0.2
        with:
          path: |
            ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkg-

      - name: Install Triton
        if: steps.cache-vcpkg-id.outputs.cache-hit != 'true'
        run: |
          cd vcpkg
          vcpkg install triton
          cd ..
          dir 

      - name: Save vcpkg
        uses: actions/cache/save@v4.0.2
        if: always() && steps.cache-vcpkg-id.outputs.cache-hit != 'true'
        with:
          path: |
            ${{ github.workspace }}/vcpkg
          key: ${{ runner.os }}-vcpkg-

      - name: Build Ponce IDA 9.0
        run: |
          cmake -S . -B build_x64_9.0 -DUSE_CLANG=ON -DIDASDK_ROOT_DIR=".\IDA_SDKs" -DSTATICLIB=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=".\vcpkg\scripts\buildsystems\vcpkg.cmake"
          cmake --build build_x64_9.0 --config Release --parallel 4


      - uses: actions/upload-artifact@master
        with:
          name: Ponce_ida90
          path: |
            build_x64_9.0/Release/Ponce.dylib
            build_x64_9.0/Release/Ponce64.dylib

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: build
    steps:
      - name: Download all OSX arifacts
        uses: actions/download-artifact@v2
        with:
          path: ./my_artifacts

      - name: Set output
        id: vars
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Build zip file
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          cd my_artifacts
          zip -r ../ponce-$RELEASE_VERSION-osx.zip *

      - name: Upload OSX artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./ponce-${{ steps.vars.outputs.tag }}-osx.zip
          asset_name: ponce-${{ steps.vars.outputs.tag }}-osx.zip
          asset_content_type: application/zip
